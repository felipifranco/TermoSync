#include <Arduino.h>

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include <max6675.h>
#include <DHT.h>
#include <DHT_U.h>
// #include <WiFi.h>
// #include <AsyncTCP.h>
// #include <ESPAsyncWebServer.h>
// #include "SPIFFS.h"
#include <WiFiManager.h>

#include <HardwareSerial.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

#define RXD2 16
#define TXD2 17

#define RS485Transmit    HIGH
#define RS485Receive     LOW
#define SSerialTxControl 19

#define DHT_PIN 13
#define DHT_TYPE DHT22
#define LED_PIN 2
#define SOUND 12

#define THERMO_SO 27
#define THERMO_CS 26
#define THERMO_CLK 25

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// const char *ssid = "SaoManoel"; // Insira o nome da sua rede WiFi
// const char *password = "sm070780b"; // Insira a senha da sua rede WiFi
// AsyncWebServer server(80);

MAX6675 thermocouple(THERMO_CLK, THERMO_CS, THERMO_SO);
DHT dht(DHT_PIN, DHT_TYPE);

void setup() {
  // pinMode(LED_PIN, OUTPUT);
  // pinMode(SOUND, OUTPUT);
  // pinMode(4, OUTPUT);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);


  Serial.begin(115200);
  // WiFiManager wm;

  // bool res;
  //   // res = wm.autoConnect(); // auto generated AP name from chipid
  //   res = wm.autoConnect("AutoConnectAP"); // anonymous ap
  //   // res = wm.autoConnect("AutoConnectAP",""); // password protected ap

  //   if(!res) {
  //       Serial.println("Failed to connect");
  //       // ESP.restart();
  //   } 
  //   else {
  //       //if you get here you have connected to the WiFi    
  //       Serial.println("connected...yeey :)");
  //   }

  // while (!Serial) {}

  // WiFi.begin(ssid, password);

  // while (WiFi.status() != WL_CONNECTED) {
  //   delay(1000);
  //   Serial.println("Conectando ao WiFi...");
  // }

  // Serial.println("Conectado ao WiFi!");
  // Serial.print("Endere√ßo IP: ");
  // Serial.println(WiFi.localIP());

  // server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
  //   float tempC = thermocouple.readCelsius();
  //   float humidity = dht.readHumidity();
  //   float tempDHT = dht.readTemperature();

  //   String response = "<html><head><title>ESP32 Web Server</title></head><body>";
  //   response += "<h1>Temperatura e Umidade</h1>";
  //   response += "<p>Temperatura em Celsius (MAX6675): ";
  //   response += String(tempC);
  //   response += "</p>";
  //   response += "<p>Temperatura em Celsius (DHT22): ";
  //   response += String(tempDHT);
  //   response += "</p>";
  //   response += "<p>Umidade relativa (%): ";
  //   response += String(humidity);
  //   response += "</p>";
  //   response += "</body></html>";

  //   request->send(200, "text/html", response);
  // });

  // server.begin();
  // Serial.println("Inicializando o sensor MAX6675 e DHT22...");
  // dht.begin();
  // delay(500);

  // if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
  //   Serial.println(F("SSD1306 allocation failed"));
  //   for(;;);
  // }
  // delay(2000);
  // display.clearDisplay();
  // display.setTextColor(WHITE);
}

void loop() {
  // display.clearDisplay();
  // digitalWrite(LED_PIN, HIGH);
  // digitalWrite(SOUND, HIGH);
  // float tempC = thermocouple.readCelsius();
  // float humidity = dht.readHumidity();
  // float tempDHT = dht.readTemperature();

  // Serial.println("---------------------------------------");
  // if (isnan(tempC)) {
  //   // Serial.println("Erro ao ler o sensor MAX6675!");
  // } else {
  //   // Serial.print("Temperatura (MAX6675): ");
  //   // Serial.println(tempC);
  // }

  // if (isnan(humidity) || isnan(tempDHT)) {
  //   Serial.println("Erro ao ler o sensor DHT22!");
  // } else {
  //   // display temperature
  //   display.setTextSize(2);
  //   display.setCursor(0,0);
  //   display.println("Parametros");
  //   display.setTextSize(1);
  //   //display.setCursor(0,10);
  //   display.print("Temperatura: ");
  //   display.print(tempDHT);
  //   display.print(" ");
  //   display.cp437(true);
  //   display.write(248);
  //   display.print("C");
    
  //   // display humidity
  //   display.setTextSize(1);
  //   //display.setCursor(0, 35);
  //   display.print("Umidade: ");
  //   //display.setCursor(0, 45);
  //   display.print(humidity);
  //   display.print(" %"); 

  //   display.display(); 

  //   // Serial.print("Temperatura (DHT22): ");
  //   // Serial.println(tempDHT);
  //   // Serial.print("Umidade relativa (%): ");
  //   // Serial.println(humidity);
  // }

  // 02 03 00 00 00 0A C5 FE
  // 02 03 14 00 1A 00 2F 00 04 00 00 01 2C 00 00 00 02 00 00 00 64 00 00 8B EE

  //uint8_t hex_values[] = {0x02, 0x03, 0x00, 0x00, 0x00, 0x0A, 0xC5, 0xFE};
  digitalWrite(SSerialTxControl, RS485Transmit);
  Serial2.write(0x02);
  Serial2.write(0x03);
  Serial2.write(0x00);
  Serial2.write(0x00);
  Serial2.write(0x00);
  Serial2.write(0x0A);
  Serial2.write(0xC5);
  Serial2.write(0xFE);

  Serial2.println();
  //Serial2.write();

  // digitalWrite(LED_PIN, LOW);
  // digitalWrite(SOUND, LOW);
  digitalWrite(SSerialTxControl, RS485Receive);
  delay(500);
  if (Serial.available() > 0) {  
    String receivedData = Serial2.readString();
    // Serial.print("Dados recebidos: ");
    Serial.println(receivedData);

    // Serial2.read();
    // Serial2.readBytes();
    // Serial2.readBytesUntil();
    // Serial2.readString();
    // Serial2.readStringUntil();

    // Serial2.print();
    // Serial2.println();
    // Serial2.write();
    Serial.println("Dados");
    char data = Serial2.read(); // Leia o caractere recebido
    Serial.println(data); // Imprima os dados recebidos no Monitor Serial

  }
  delay(1500);
}